% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_cv.R
\name{get_cv}
\alias{get_cv}
\title{Calculate Coefficient of Variation (CV) and Optionally Draw Plot}
\usage{
get_cv(
  data,
  name = "cv",
  plot = c("no", "box_plot", "violin_plot", "histogram", "density_plot")
)
}
\arguments{
\item{data}{A data frame containing numerical values for which CV should be
calculated row-wise. Missing values (`NA`) are handled by removing them
from the calculation of mean and standard deviation for each row.}

\item{name}{A character string specifying the name of the new column that
will store the calculated Coefficient of Variation values. Default is "cv".}

\item{plot}{A character string indicating whether to generate a plot and
which type.
\itemize{
  \item "no": No plot is generated; only the data frame with the added CV column is returned.
  \item "box_plot": Generates a box plot of the calculated CV values.
  \item "violin_plot": Generates a violin plot of the calculated CV values.
  \item "histogram": Generates a histogram of the calculated CV values.
  \item "density_plot": Generates a density plot of the calculated CV values.
}}
}
\value{
#' If `plot = "no"`, returns the original `data` data frame with an additional
column (named as specified by `name`) containing the row-wise Coefficient
of Variation.
If `plot = "box_plot"` or `plot = "violin_plot"`or `plot = "histogram"` or
`plot = "violin_plot"` returns a `list` containing:
\itemize{
  \item `data`: The original `data` data frame with the added CV column.
  \item `plot`: A `ggplot` object of the generated box plot, violin plot,
histogram or density plot.
}
}
\description{
This function calculates the Coefficient of Variation (CV) for each row
(e.g., each protein or phosphosite) in a numerical data frame. It can
optionally generate a box plot, violin plot, histogram or density plot of the calculated CVs.
The CV is calculated as (standard deviation / mean) * 100.
}
\details{
The function calculates the CV for each row independently. It's particularly
useful for quality control in omics data, where CV can indicate technical
variability across replicates for a given feature.

**Missing Values (`NA`)**: `NA` values in a row are ignored when calculating
the mean and standard deviation for that row's CV. If a row contains only
`NA` values, its CV will be `NaN` (Not a Number).

**Plotting**:
For plotting, all calculated CV values are aggregated into a single distribution.
The plots do not categorize CV by groups unless further manipulation is done
outside this function. The x-axis for plots is set to "All Samples" to reflect
this global distribution.
}
\examples{
set.seed(123)
sample_data <- data.frame(
  Feature = paste0("F", 1:10),
  Replicate1 = rnorm(10, mean = 100, sd = 10),
  Replicate2 = rnorm(10, mean = 105, sd = 12),
  Replicate3 = rnorm(10, mean = 95, sd = 8),
  Replicate4 = c(rnorm(9, mean = 100, sd = 10), NA) # Add an NA for demonstration
)

# Case 1: Calculate CV and return data only
cv_results_df <- get_cv(data = sample_data[, -1], # Exclude 'Feature' column for CV calculation
                        name = "CV_percent",
                        plot = "no")
print(head(cv_results_df))

# Case 2: Calculate CV and generate a box plot
cv_results_boxplot <- get_cv(data = sample_data[, -1],
                             name = "CV_value",
                             plot = "box_plot")
print(head(cv_results_boxplot$data))
cv_results_boxplot$plot # Display the box plot

# Case 3: Calculate CV and generate a violin plot
cv_results_violinplot <- get_cv(data = sample_data[, -1],
                               name = "CV_value",
                               plot = "violin_plot")
print(head(cv_results_violinplot$data))
cv_results_violinplot$plot # Display the violin plot

# Case 4: Calculate CV and generate a histogram
cv_results_histogram <- get_cv(data = sample_data[, -1],
                                name = "CV_value",
                                plot = "histogram")
print(head(cv_results_histogram$data))
cv_results_histogram$plot # Display the histogram

# Case 5: Calculate CV and generate a density_plot
cv_results_density_plot <- get_cv(data = sample_data[, -1],
                               name = "CV_value",
                               plot = "density_plot")
print(head(cv_results_density_plot$data))
cv_results_density_plot$plot # Display the density plot

# Example with NA-only row
na_data <- data.frame(A = c(1, NA, 3), B = c(2, NA, 4))
na_cv <- get_cv(na_data, plot = "no")
print(na_cv)

}
