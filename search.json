[{"path":"https://yen-kim.github.io/omics4drug/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 omics4drug authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://yen-kim.github.io/omics4drug/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yen Thi-Kim Nguyen. Author, maintainer, copyright holder. Truc-Ly Le-Huynh. Author. Valdemaras Petrosius. Contributor. Kim Theilgaard-Mønch. Scientific advisor. Erwin M. Schoof. Scientific advisor. International Doctoral Programme Discovering treatment biomedical research - DISCOVER. Funder.","code":""},{"path":"https://yen-kim.github.io/omics4drug/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thi-Kim Nguyen Y, Le-Huynh T (2025). omics4drug: R toolkit facilitate Mass Spectrometry-based Proteomics Phosphoproteomics data analysis. R package version 0.1.0, https://github.com/yen-kim/omics4drug.","code":"@Manual{,   title = {omics4drug: An R toolkit to facilitate Mass Spectrometry-based Proteomics and Phosphoproteomics data analysis},   author = {Yen {Thi-Kim Nguyen} and Truc-Ly Le-Huynh},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/yen-kim/omics4drug}, }"},{"path":"https://yen-kim.github.io/omics4drug/index.html","id":"omics4drug-","dir":"","previous_headings":"","what":"An R toolkit to facilitate Mass Spectrometry-based Proteomics and Phosphoproteomics data analysis","title":"An R toolkit to facilitate Mass Spectrometry-based Proteomics and Phosphoproteomics data analysis","text":"R toolkit facilitate Mass Spectrometry-based Proteomics Phosphoproteomics data analysis omics4drug designed analysis visualization Mass Spectrometry-based phosphoproteomics proteomics data drug discovery. package provides functions quality control, normalization, pathway enrichment analysis, drug-target prediction.","code":""},{"path":"https://yen-kim.github.io/omics4drug/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R toolkit to facilitate Mass Spectrometry-based Proteomics and Phosphoproteomics data analysis","text":"get latest -development features, install development version GitHub: package also accessible download via Zenodo DOI 10.5281/zenodo.17117624.","code":"if(!requireNamespace(\"devtools\", quietly = TRUE)) {  install.packages(\"devtools\") } devtools::install_github(\"yen-kim/omics4drug\")"},{"path":"https://yen-kim.github.io/omics4drug/index.html","id":"functions","dir":"","previous_headings":"Installation","what":"Functions","title":"An R toolkit to facilitate Mass Spectrometry-based Proteomics and Phosphoproteomics data analysis","text":"See Package index full list functions. Data Processing Quality Control get_count_phosphosite(): Counts visualizes number unique phosphosites per sample group, often based probability threshold. get_count_protein(): Counts visualizes number unique protein groups per sample group. get_cv(): Calculates visualizes coefficient variation (CV) given dataset, useful assessing data variability quality. get_sty(): Calculates visualizes count percentage phosphorylation sites (Serine (S), Threonine (T), Tyrosine (Y)). Data Normalization get_norm_phos(): Normalizes phosphosite intensity data account variations samples. get_norm_prot(): Normalizes protein group intensity data. Functional Pathway Enrichment Analysis get_GO(): Performs Gene Ontology (GO) enrichment analysis identify biological processes, molecular functions, cellular components overrepresented data. get_KEGG(): Performs KEGG pathway enrichment analysis determine biological pathways significantly impacted. Kinase Drug Prediction get_KSEA(): Performs Kinase Substrate Enrichment Analysis (KSEA) predict activity kinases based phosphorylation substrates. get_inhibitor(): Predicts drugs might target kinases identified analysis, using external database. Others get_annotation(): Map Gene Identifiers","code":""},{"path":"https://yen-kim.github.io/omics4drug/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"An R toolkit to facilitate Mass Spectrometry-based Proteomics and Phosphoproteomics data analysis","text":"R package produced support Copenhagen University DISCOVER PhD program.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_GO.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Gene Ontology (GO) Enrichment Analysis and Visualization — get_GO","title":"Perform Gene Ontology (GO) Enrichment Analysis and Visualization — get_GO","text":"function performs Gene Ontology (GO) enrichment analysis provided list gene identifiers using `clusterProfiler` package. supports human mouse organisms various key types input genes. Optionally, can generate bar plots bubble plots visualize top enriched GO terms across Biological Process (BP), Cellular Component (CC), Molecular Function (MF) ontologies.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_GO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Gene Ontology (GO) Enrichment Analysis and Visualization — get_GO","text":"","code":"get_GO(   input_list,   organism = c(\"Homo sapiens\", \"Mus musculus\"),   input_keytype = c(\"ACCNUM\", \"ALIAS\", \"ENSEMBL\", \"ENSEMBLPROT\", \"ENSEMBLTRANS\",     \"ENTREZID\", \"ENZYME\", \"EVIDENCE\", \"EVIDENCEALL\", \"GENENAME\", \"GENETYPE\", \"GO\",     \"GOALL\", \"IPI\", \"MGI\", \"ONTOLOGY\", \"ONTOLOGYALL\", \"PATH\", \"PFAM\", \"PMID\", \"PROSITE\",     \"REFSEQ\", \"SYMBOL\", \"UNIPROT\"),   plot = c(\"no\", \"bar_plot\", \"bubble_plot\") )"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_GO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Gene Ontology (GO) Enrichment Analysis and Visualization — get_GO","text":"input_list character vector gene identifiers (e.g., ENTREZIDs, Symbols) perform GO enrichment analysis. organism character string specifying organism. Must one \"Homo sapiens\" (human) \"Mus musculus\" (mouse). input_keytype character string specifying type gene identifiers provided `input_list`. must valid `keyType` supported `clusterProfiler::enrichGO` corresponding `OrgDb` package. Common options include \"ENTREZID\", \"SYMBOL\", \"ENSEMBL\", \"UNIPROT\", etc. Refer `keytypes(OrgDb_package_name)` full list (e.g., `keytypes(org.Hs.eg.db)` human `keytypes(org.Mm.eg.db)` mouse). plot character string specifying type plot generate. \"\": plot generated; GO enrichment table returned. \"bar_plot\": Generates separate bar plots top 20 enriched     terms GO ontology (BP, CC, MF). bars colored `-log10(pvalue)`. \"bubble_plot\": Generates separate bubble plots top 20 enriched     terms GO ontology (BP, CC, MF). Bubble size represents `Count`     (number genes term), color represents `-log10(pvalue)`.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_GO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Gene Ontology (GO) Enrichment Analysis and Visualization — get_GO","text":"`plot = \"\"`, returns `data.frame` GO enrichment results. `plot = \"bar_plot\"` `plot = \"bubble_plot\"`, returns `list` containing: `GO_data`: `data.frame` GO enrichment results. `plot`: `patchwork` object combining plots BP, CC, MF ontologies.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_GO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Gene Ontology (GO) Enrichment Analysis and Visualization — get_GO","text":"","code":"if (FALSE) { # \\dontrun{ # Example for Homo sapiens using ENTREZID # A gene list (replace with your actual data) human_genes <- c(\"100\", \"1000\", \"10000\", \"10001\", \"10002\", \"10003\",                  \"10004\", \"10005\", \"10006\", \"10007\", \"10008\", \"10009\",                  \"1001\", \"10010\", \"10011\", \"10012\")  # Get GO data only go_results_human_table <- get_GO(input_list = human_genes,                                       organism = \"Homo sapiens\",                                       input_keytype = \"ENTREZID\",                                       plot = \"no\") print(head(go_results_human_table))  # Get GO data and bar plots go_results_human_bar_plot <- get_GO(input_list = human_genes,                                          organism = \"Homo sapiens\",                                          input_keytype = \"ENTREZID\",                                          plot = \"bar_plot\") print(head(go_results_human_bar_plot$GO_data)) go_results_human_bar_plot$plot # This will display the combined plot  # Get GO data and bubble plots go_results_human_bubble_plot <- get_GO(input_list = human_genes,                                             organism = \"Homo sapiens\",                                             input_keytype = \"ENTREZID\",                                             plot = \"bubble_plot\") print(head(go_results_human_bubble_plot$GO_data)) go_results_human_bubble_plot$plot # This will display the combined plot  # Example for Mus musculus using SYMBOL # A gene list (replace with your actual data) mouse_genes <- c(\"Trp53\", \"Cdkn1a\", \"Mdm2\", \"Myc\", \"Fos\", \"Jun\", \"Akt1\", \"Pik3ca\")  # Get GO data and bubble plots for mouse go_results_mouse_bubble_plot <- get_GO(input_list = mouse_genes,                                              organism = \"Mus musculus\",                                              input_keytype = \"SYMBOL\",                                              plot = \"bubble_plot\") print(head(go_results_mouse_bubble_plot$GO_data)) go_results_mouse_bubble_plot$plot } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KEGG.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform KEGG Pathway Enrichment Analysis and Visualization — get_KEGG","title":"Perform KEGG Pathway Enrichment Analysis and Visualization — get_KEGG","text":"function performs Kyoto Encyclopedia Genes Genomes (KEGG) pathway enrichment analysis provided list gene identifiers using `clusterProfiler` package. supports human mouse organisms. Optionally, can generate bar plots bubble plots visualize top enriched KEGG pathways.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KEGG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform KEGG Pathway Enrichment Analysis and Visualization — get_KEGG","text":"","code":"get_KEGG(   input_list,   organism = c(\"Homo sapiens\", \"Mus musculus\"),   plot = c(\"no\", \"bar_plot\", \"bubble_plot\") )"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KEGG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform KEGG Pathway Enrichment Analysis and Visualization — get_KEGG","text":"input_list character vector gene identifiers, ideally ENTREZ IDs, perform KEGG enrichment analysis. key types used, ensure can mapped ENTREZ IDs `clusterProfiler`. organism character string specifying organism. Must one \"Homo sapiens\" (human, uses KEGG code 'hsa') \"Mus musculus\" (mouse, uses KEGG code 'mmu'). plot character string specifying type plot generate. \"\": plot generated; KEGG enrichment table returned. \"bar_plot\": Generates bar plot top 20 enriched KEGG pathways.     Bars colored `-log10(pvalue)`. \"bubble_plot\": Generates bubble plot top 20 enriched KEGG pathways.     Bubble size represents `Count` (number genes pathway),     color represents `-log10(pvalue)`.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KEGG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform KEGG Pathway Enrichment Analysis and Visualization — get_KEGG","text":"`plot = \"\"`, returns `data.frame` KEGG enrichment results. `plot = \"bar_plot\"` `plot = \"bubble_plot\"`, returns `list` containing: `KEGG_data`: `data.frame` KEGG enrichment results. `plot`: `ggplot` object representing combined plot top KEGG pathways.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KEGG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform KEGG Pathway Enrichment Analysis and Visualization — get_KEGG","text":"","code":"if (FALSE) { # \\dontrun{ # Example for Homo sapiens using ENTREZIDs # A gene list (replace with your actual ENTREZ IDs) human_entrez_genes <- c(\"597\", \"1000\", \"1001\", \"10010\", \"10011\", \"10012\",                         \"10013\", \"10014\", \"10015\", \"10016\", \"10017\", \"10018\")  # Get KEGG data only kegg_results_human_table <- get_KEGG(input_list = human_entrez_genes,                                           organism = \"Homo sapiens\",                                           plot = \"no\") print(head(kegg_results_human_table))  # Get KEGG data and bar plot kegg_results_human_bar_plot <- get_KEGG(input_list = human_entrez_genes,                                              organism = \"Homo sapiens\",                                              plot = \"bar_plot\") print(head(kegg_results_human_bar_plot$KEGG_data)) kegg_results_human_bar_plot$plot # This will display the plot  # Example for Mus musculus using ENTREZIDs # A gene list (replace with your actual ENTREZ IDs) mouse_entrez_genes <- c(\"12536\", \"12543\", \"12551\", \"12574\", \"12610\", \"12613\",                         \"12614\", \"12615\", \"12618\", \"12620\", \"12621\", \"12623\")  # Get KEGG data and bubble plot for mouse kegg_results_mouse_bubble_plot <- get_KEGG(input_list = mouse_entrez_genes,                                                  organism = \"Mus musculus\",                                                  plot = \"bubble_plot\") print(head(kegg_results_mouse_bubble_plot$KEGG_data)) kegg_results_mouse_bubble_plot$plot # This will display the plot } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KSEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Kinase Substrate Enrichment Analysis (KSEA) and generate visualizations. — get_KSEA","title":"Perform Kinase Substrate Enrichment Analysis (KSEA) and generate visualizations. — get_KSEA","text":"function leverages `KSEAapp` package perform KSEA, either generate kinase-substrate interaction table table kinase activity scores. Optionally, can produce various plots visualize results, including chord diagrams, sankey diagrams, bar plots, scatter plots.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KSEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Kinase Substrate Enrichment Analysis (KSEA) and generate visualizations. — get_KSEA","text":"","code":"get_KSEA(   data,   table_type = c(\"kinase_substrate\", \"kinase_score\"),   plot = c(\"no\", \"chord_diagram\", \"sankey_diagram\", \"bar_plot\", \"scatter_plot\"),   NetworKIN = TRUE,   NetworKIN.cutoff = 1 )"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KSEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Kinase Substrate Enrichment Analysis (KSEA) and generate visualizations. — get_KSEA","text":"data data frame containing phosphoproteomics data. typically includes columns protein identifiers, phosphorylation sites, quantitative values (e.g., log2 fold changes intensities). exact format conform requirements `KSEAapp::KSEA.KS_table` `KSEAapp::KSEA.Scores`. table_type character string specifying type table generate. Must one \"kinase_substrate\" (get table kinase-substrate interactions) \"kinase_score\" (get table inferred kinase activity scores). plot character string specifying type plot generate. Options include: \"\": plot generated, table returned. \"chord_diagram\": Generates chord diagram kinase-substrate interactions     (applicable `table_type = \"kinase_substrate\"`). \"sankey_diagram\": Generates Sankey diagram kinase-substrate interactions     (applicable `table_type = \"kinase_substrate\"`). \"bar_plot\": Generates bar plot kinase Z-scores (applicable     `table_type = \"kinase_score\"`). \"scatter_plot\": Generates scatter plot (volcano plot-like)     kinase Z-scores vs. -log10(p-value) (applicable `table_type = \"kinase_score\"`). NetworKIN logical value indicating whether use NetworKIN scores kinase-substrate prediction. Default `TRUE`. NetworKIN.cutoff numeric value specifying NetworKIN cutoff score. applicable `NetworKIN = TRUE`. Default `1`.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KSEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Kinase Substrate Enrichment Analysis (KSEA) and generate visualizations. — get_KSEA","text":"list containing: `table`: generated data frame (either kinase-substrate table     kinase score table). `plot`: `ggplot` object `circlize` plot plot type     \"\" specified. `plot = \"\"`, `table` returned.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_KSEA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Kinase Substrate Enrichment Analysis (KSEA) and generate visualizations. — get_KSEA","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming 'data_example' is your phosphoproteomics data and 'KSData' is loaded # from KSEAapp. # Example 1: Get kinase-substrate table without a plot ks_table <- get_KSEA(data = data_example, table_type = \"kinase_substrate\", plot = \"no\") print(ks_table)  # Example 2: Get kinase scores and a bar plot kinase_results <- get_KSEA(data = data_example, table_type = \"kinase_score\", plot = \"bar_plot\") print(kinase_results$table) print(kinase_results$plot)  # Example 3: Get kinase-substrate table and a chord diagram ks_chord_results <- get_KSEA(data = data_example, table_type = \"kinase_substrate\", plot = \"chord_diagram\") # The chord diagram is plotted directly.  # Example 4: Get kinase scores and a scatter plot kinase_scatter_results <- get_KSEA(data = data_example, table_type = \"kinase_score\", plot = \"scatter_plot\") print(kinase_scatter_results$table) print(kinase_scatter_results$plot) } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Gene Identifiers — get_annotation","title":"Map Gene Identifiers — get_annotation","text":"Map Gene Identifiers","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Gene Identifiers — get_annotation","text":"","code":"get_annotation(   data,   input_id_column,   input_id_type,   output_id_type = \"ENTREZID\",   organism = c(\"Homo sapiens\", \"Mus musculus\") )"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Gene Identifiers — get_annotation","text":"data data frame containing gene identifiers mapped. input_id_column character string specifying name column `data` contains gene identifiers mapped. input_id_type character string specifying type input gene identifiers (e.g., \"ENSEMBL\", \"SYMBOL\", \"REFSEQ\"). corresponds `keytype` argument `AnnotationDbi::mapIds`. Common `keytype` values can found running `keytypes(org.Hs.eg.db)` homo sapiens `keytypes(org.Mm.eg.db)` mus musculus. output_id_type character string specifying type input gene identifiers (e.g., \"ENSEMBL\", \"SYMBOL\", \"REFSEQ\"). corresponds `keytype` argument `AnnotationDbi::mapIds`. Common `keytype` values can found running `keytypes(org.Hs.eg.db)` homo sapiens `keytypes(org.Mm.eg.db)` mus musculus. organism character string, either \"Homo sapiens\" \"Mus musculus\", specifying organism mapping performed. Defaults \"Homo sapiens\".","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Gene Identifiers — get_annotation","text":"data frame identical input `data` frame,   additional column named `entrez_id` containing mapped Entrez Gene IDs.   mapping found ID, `NA` returned `entrez_id` column.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Gene Identifiers — get_annotation","text":"","code":"if (FALSE) { # \\dontrun{ # --- Example for Homo sapiens --- # Create a sample data frame my_data_human <- data.frame(   GeneSymbol = c(\"TP53\", \"BRCA1\", \"MYC\", \"GAPDH\", \"UNKNOWN_GENE\"),   Expression = c(10, 15, 20, 50, 5),   stringsAsFactors = FALSE )  # Map Gene Symbols to Entrez IDs for human mapped_data_human <- get_annotation(   data = my_data_human,   input_id_column = \"GeneSymbol\",   input_id_type = \"SYMBOL\",   output_id_type = \"ENTREZID\",   organism = \"Homo sapiens\" ) print(mapped_data_human)  # --- Example for Mus musculus --- # Create another sample data frame my_data_mouse <- data.frame(   EnsemblID = c(\"ENSMUSG00000020717\", \"ENSMUSG00000026774\", \"ENSMUSG00000000001\"),   FoldChange = c(1.2, -0.8, 2.5),   stringsAsFactors = FALSE )  # Map Ensembl IDs to Entrez IDs for mouse mapped_data_mouse <- get_annotation(   data = my_data_mouse,   input_id_column = \"EnsemblID\",   input_id_type = \"ENSEMBL\",   output_id_type = \"ENTREZID\",   organism = \"Mus musculus\" ) print(mapped_data_mouse)  # Example with a non-existent input column tryCatch({   get_annotation(my_data_human, \"NonExistentColumn\", \"SYMBOL\", \"ENTREZID\") }, error = function(e) {   message(\"Caught expected error: \", e$message) }) } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_phosphosite.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Phosphosites Based on Probability Threshold — get_count_phosphosite","title":"Count Phosphosites Based on Probability Threshold — get_count_phosphosite","text":"function processes data frame count unique phosphosites based specified probability threshold. groups data \"Group\" extracted `Sample` column, calculates average phosphosite count group, can optionally generate bar plot visualize results.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_phosphosite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Phosphosites Based on Probability Threshold — get_count_phosphosite","text":"","code":"get_count_phosphosite(data, prob_threshold, plot = c(\"bar_plot\", \"no\"))"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_phosphosite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Phosphosites Based on Probability Threshold — get_count_phosphosite","text":"data data frame containing data. must columns named `Sample`, `phosphosites`, `Probability`. `Sample` column expected format 'sampleID_groupName' (e.g., 'p1_control', 'p3_dose-1'). prob_threshold numeric value 0 1. probability cutoff; function consider phosphosites `Probability` value greater equal threshold. plot character string. Specifies whether generate plot. Accepted values `\"bar_plot\"` generate plot `\"\"` return summary table. Defaults `\"bar_plot\"`.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_phosphosite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Phosphosites Based on Probability Threshold — get_count_phosphosite","text":"`plot` set `\"\"`, function returns `tibble`   summarizing mean `Number_of_phosphosites` `Group`.   `plot` `\"bar_plot\"`, function returns `list` two   elements: `table`: summary `tibble` mean counts per group. `plot`: `ggplot` object bar plot, ready printing. function stop return error required columns   missing `prob_threshold` valid number.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_phosphosite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count Phosphosites Based on Probability Threshold — get_count_phosphosite","text":"generated plot shows mean count \"Group\" bar includes jittered points representing individual sample counts.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_phosphosite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Phosphosites Based on Probability Threshold — get_count_phosphosite","text":"","code":"if (FALSE) { # \\dontrun{ # Create a data frame for demonstration data <- data.frame(   Sample = c(\"p1_control\", \"p2_control\", \"p3_dose-1\", \"p4_dose-1\", \"p5_dose-2\", \"p6_dose-2\"),   phosphosites = c(\"amino_acid_S1\", \"amino_acid_T2\", \"amino_acid_Y4\",                    \"amino_acid_S1\", \"amino_acid_T2\", \"amino_acid_S1\"),   Probability = c(0.95, 0.82, 0.65, 0.91, 0.73, 0.99) )  # Get the summary table and the bar plot for a probability threshold of 0.75 results <- get_count_phosphosite(data, prob_threshold = 0.75, plot = \"bar_plot\") print(results$table) print(results$plot)  # Get only the summary table for a probability threshold of 0.9 summary_table <- get_count_phosphosite(data, prob_threshold = 0.9, plot = \"no\") print(summary_table) } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_protein.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Protein groups Based on Probability Threshold — get_count_protein","title":"Count Protein groups Based on Probability Threshold — get_count_protein","text":"function processes data frame count unique protein groups based specified probability threshold. groups data \"Group\" extracted `Sample` column, calculates average protein group count group, can optionally generate bar plot visualize results.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_protein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Protein groups Based on Probability Threshold — get_count_protein","text":"","code":"get_count_protein(data, prob_threshold, plot = c(\"bar_plot\", \"no\"))"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_protein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Protein groups Based on Probability Threshold — get_count_protein","text":"data data frame containing data. must columns named `Sample`, `Protein_group`, `Probability`. `Sample` column expected format 'sampleID_groupName' (e.g., 'p1_control', 'p3_dose-1'). prob_threshold numeric value 0 1. probability cutoff; function consider phosphosites `Probability` value greater equal threshold. plot character string. Specifies whether generate plot. Accepted values `\"bar_plot\"` generate plot `\"\"` return summary table. Defaults `\"bar_plot\"`.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_protein.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Protein groups Based on Probability Threshold — get_count_protein","text":"`plot` set `\"\"`, function returns `tibble`   summarizing mean `Number_of_protein_group` `Group`.   `plot` `\"bar_plot\"`, function returns `list` two   elements: `table`: summary `tibble` mean counts per group. `plot`: `ggplot` object bar plot, ready printing. function stop return error required columns   missing `prob_threshold` valid number.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_protein.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count Protein groups Based on Probability Threshold — get_count_protein","text":"generated plot shows mean count \"Group\" bar includes jittered points representing individual sample counts.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_count_protein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Protein groups Based on Probability Threshold — get_count_protein","text":"","code":"if (FALSE) { # \\dontrun{ # Create a data frame for demonstration data <- data.frame(   Sample = c(\"p1_control\", \"p2_control\", \"p3_dose-1\", \"p4_dose-1\", \"p5_dose-2\", \"p6_dose-2\"),   Protein_group = c(\"Protein_1\", \"Protein_2\", \"Protein_1\",                    \"Protein_1\", \"Protein_3\", \"Protein_1\"),   Probability = c(0.95, 0.82, 0.65, 0.91, 0.73, 0.99) )  # Get the summary table and the bar plot for a probability threshold of 0.75 results <- get_count_protein(data, prob_threshold = 0.75, plot = \"bar_plot\") print(results$table) print(results$plot)  # Get only the summary table for a probability threshold of 0.9 summary_table <- get_count_protein(data, prob_threshold = 0.9, plot = \"no\") print(summary_table) } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Coefficient of Variation (CV) and Optionally Draw Plot — get_cv","title":"Calculate Coefficient of Variation (CV) and Optionally Draw Plot — get_cv","text":"function calculates Coefficient Variation (CV) row (e.g., protein phosphosite) numerical data frame. can optionally generate box plot, violin plot, histogram density plot calculated CVs. CV calculated (standard deviation / mean) * 100.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Coefficient of Variation (CV) and Optionally Draw Plot — get_cv","text":"","code":"get_cv(   data,   name = \"cv\",   plot = c(\"no\", \"box_plot\", \"violin_plot\", \"histogram\", \"density_plot\") )"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Coefficient of Variation (CV) and Optionally Draw Plot — get_cv","text":"data data frame containing numerical values CV calculated row-wise. Missing values (`NA`) handled removing calculation mean standard deviation row. name character string specifying name new column store calculated Coefficient Variation values. Default \"cv\". plot character string indicating whether generate plot type. \"\": plot generated; data frame added CV column returned. \"box_plot\": Generates box plot calculated CV values. \"violin_plot\": Generates violin plot calculated CV values. \"histogram\": Generates histogram calculated CV values. \"density_plot\": Generates density plot calculated CV values.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Coefficient of Variation (CV) and Optionally Draw Plot — get_cv","text":"#' `plot = \"\"`, returns original `data` data frame additional column (named specified `name`) containing row-wise Coefficient Variation. `plot = \"box_plot\"` `plot = \"violin_plot\"``plot = \"histogram\"` `plot = \"violin_plot\"` returns `list` containing: `data`: original `data` data frame added CV column. `plot`: `ggplot` object generated box plot, violin plot, histogram density plot.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_cv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Coefficient of Variation (CV) and Optionally Draw Plot — get_cv","text":"function calculates CV row independently. particularly useful quality control omics data, CV can indicate technical variability across replicates given feature. **Missing Values (`NA`)**: `NA` values row ignored calculating mean standard deviation row's CV. row contains `NA` values, CV `NaN` (Number). **Plotting**: plotting, calculated CV values aggregated single distribution. plots categorize CV groups unless manipulation done outside function. x-axis plots set \"Samples\" reflect global distribution.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Coefficient of Variation (CV) and Optionally Draw Plot — get_cv","text":"","code":"set.seed(123) sample_data <- data.frame(   Feature = paste0(\"F\", 1:10),   Replicate1 = rnorm(10, mean = 100, sd = 10),   Replicate2 = rnorm(10, mean = 105, sd = 12),   Replicate3 = rnorm(10, mean = 95, sd = 8),   Replicate4 = c(rnorm(9, mean = 100, sd = 10), NA) # Add an NA for demonstration )  # Case 1: Calculate CV and return data only cv_results_df <- get_cv(data = sample_data[, -1], # Exclude 'Feature' column for CV calculation                         name = \"CV_percent\",                         plot = \"no\") print(head(cv_results_df)) #> # A tibble: 6 × 5 #>   Replicate1 Replicate2 Replicate3 Replicate4 CV_percent #>        <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #> 1       94.4      120.        86.5      104.       14.1  #> 2       97.7      109.        93.3       97.0       6.99 #> 3      116.       110.        86.8      109.       12.0  #> 4      101.       106.        89.2      109.        8.62 #> 5      101.        98.3       90.0      108.        7.59 #> 6      117.       126.        81.5      107.       17.9   # Case 2: Calculate CV and generate a box plot cv_results_boxplot <- get_cv(data = sample_data[, -1],                              name = \"CV_value\",                              plot = \"box_plot\") print(head(cv_results_boxplot$data)) #> # A tibble: 6 × 5 #>   Replicate1 Replicate2 Replicate3 Replicate4 CV_value #>        <dbl>      <dbl>      <dbl>      <dbl>    <dbl> #> 1       94.4      120.        86.5      104.     14.1  #> 2       97.7      109.        93.3       97.0     6.99 #> 3      116.       110.        86.8      109.     12.0  #> 4      101.       106.        89.2      109.      8.62 #> 5      101.        98.3       90.0      108.      7.59 #> 6      117.       126.        81.5      107.     17.9  cv_results_boxplot$plot # Display the box plot   # Case 3: Calculate CV and generate a violin plot cv_results_violinplot <- get_cv(data = sample_data[, -1],                                name = \"CV_value\",                                plot = \"violin_plot\") print(head(cv_results_violinplot$data)) #> # A tibble: 6 × 5 #>   Replicate1 Replicate2 Replicate3 Replicate4 CV_value #>        <dbl>      <dbl>      <dbl>      <dbl>    <dbl> #> 1       94.4      120.        86.5      104.     14.1  #> 2       97.7      109.        93.3       97.0     6.99 #> 3      116.       110.        86.8      109.     12.0  #> 4      101.       106.        89.2      109.      8.62 #> 5      101.        98.3       90.0      108.      7.59 #> 6      117.       126.        81.5      107.     17.9  cv_results_violinplot$plot # Display the violin plot   # Case 4: Calculate CV and generate a histogram cv_results_histogram <- get_cv(data = sample_data[, -1],                                 name = \"CV_value\",                                 plot = \"histogram\") print(head(cv_results_histogram$data)) #> # A tibble: 6 × 5 #>   Replicate1 Replicate2 Replicate3 Replicate4 CV_value #>        <dbl>      <dbl>      <dbl>      <dbl>    <dbl> #> 1       94.4      120.        86.5      104.     14.1  #> 2       97.7      109.        93.3       97.0     6.99 #> 3      116.       110.        86.8      109.     12.0  #> 4      101.       106.        89.2      109.      8.62 #> 5      101.        98.3       90.0      108.      7.59 #> 6      117.       126.        81.5      107.     17.9  cv_results_histogram$plot # Display the histogram   # Case 5: Calculate CV and generate a density_plot cv_results_density_plot <- get_cv(data = sample_data[, -1],                                name = \"CV_value\",                                plot = \"density_plot\") print(head(cv_results_density_plot$data)) #> # A tibble: 6 × 5 #>   Replicate1 Replicate2 Replicate3 Replicate4 CV_value #>        <dbl>      <dbl>      <dbl>      <dbl>    <dbl> #> 1       94.4      120.        86.5      104.     14.1  #> 2       97.7      109.        93.3       97.0     6.99 #> 3      116.       110.        86.8      109.     12.0  #> 4      101.       106.        89.2      109.      8.62 #> 5      101.        98.3       90.0      108.      7.59 #> 6      117.       126.        81.5      107.     17.9  cv_results_density_plot$plot # Display the density plot   # Example with NA-only row na_data <- data.frame(A = c(1, NA, 3), B = c(2, NA, 4)) na_cv <- get_cv(na_data, plot = \"no\") print(na_cv) #> # A tibble: 3 × 3 #>       A     B    cv #>   <dbl> <dbl> <dbl> #> 1     1     2  47.1 #> 2    NA    NA  NA   #> 3     3     4  20.2"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_inhibitor.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Kinase Inhibitors from a Database — get_inhibitor","title":"Get Kinase Inhibitors from a Database — get_inhibitor","text":"function filters provided drug-kinase interaction database find drugs inhibit list specified kinases given organism. can return either filtered data frame interactive `DT` data table.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_inhibitor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Kinase Inhibitors from a Database — get_inhibitor","text":"","code":"get_inhibitor(kinase_list, drug_database, return_datatable = FALSE)"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_inhibitor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Kinase Inhibitors from a Database — get_inhibitor","text":"kinase_list character vector kinase UniProt accessions names. kinases want find inhibitors . drug_database data frame known drug-kinase interactions. table must contain columns `uniprot_accessions` similar kinase identifier, `Drug`. return_datatable logical value. `TRUE`, function returns list containing raw data frame interactive `DT::datatable`. `FALSE`, returns data frame.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_inhibitor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Kinase Inhibitors from a Database — get_inhibitor","text":"data frame list. `return_datatable` `FALSE`, returns   data frame filtered inhibitors. `TRUE`, returns list   containing data frame interactive data table.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_inhibitor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Kinase Inhibitors from a Database — get_inhibitor","text":"","code":"if (FALSE) { # \\dontrun{ # Create a database for demonstration database <- data.frame(   Drug = c(\"Imatinib\", \"Erlotinib\", \"Gefitinib\", \"Dasatinib\", \"Rapamycin\"),   Target = c(\"ABL1\", \"EGFR\", \"EGFR\", \"SRC\", \"MTOR\"),   uniprot_accessions = c(\"P00519\", \"P00533\", \"P00533\", \"P12931\", \"P42345\"),   Organism = c(\"Homo sapiens\", \"Homo sapiens\", \"Homo sapiens\",                \"Homo sapiens\", \"Mus musculus\") )  # Example 1: Get the data frame of inhibitors for Homo sapiens kinases my_kinases <- c(\"P00519\", \"P00533\", \"P12931\") inhibitors_df <- get_inhibitor (kinase_list = my_kinases,                                 drug_database = database,                                 return_datatable = FALSE                                 ) print(inhibitors_df)  # Example 2: Get both the data frame and the interactive data table my_kinases_mouse <- c(\"P42345\") inhibitors_dt <- get_inhibitor(kinase_list = my_kinases_mouse,                                drug_database = database,                                return_datatable = TRUE                               )  # Access the list elements print(inhibitors_dt$raw_data) inhibitors_dt$datatable # This will display the interactive table } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_phos.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Phosphoproteomics Data and Perform Differential Analysis with `limma` — get_norm_phos","title":"Normalize Phosphoproteomics Data and Perform Differential Analysis with `limma` — get_norm_phos","text":"function processes raw phosphoproteomics intensity data, performs filtering, imputation, median scaling using `PhosR` functions, conducts differential phosphorylation analysis using `limma` package. Optionally, can generate volcano plot visualize results.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_phos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Phosphoproteomics Data and Perform Differential Analysis with `limma` — get_norm_phos","text":"","code":"get_norm_phos(   data,   alpha = 0.5,   beta = 0.7,   plot = c(\"no\", \"volcano_plot\"),   value = c(\"p_value\", \"adj_p_value\") )"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_phos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Phosphoproteomics Data and Perform Differential Analysis with `limma` — get_norm_phos","text":"data data frame containing phosphoproteomics quantification data. expected columns: `protein_group`: Character, representing protein identifiers. `amino_acid`: Character, representing phosphorylated amino acid (e.g., \"S\", \"T\", \"Y\"). `site`: Numeric, representing position phosphorylation site. `modification_sites`: Character, unique identifier phosphosite     (e.g., \"protein_S123\"). used row names output table. Columns suffixed \"_control\" \"_treat\" followed sample     identifier (e.g., \"p1_control\", \"p7_control\", \"p5_treat\", \"p6_treat\") containing quantitative values. alpha Numeric, parameter `PhosR::selectGrps` function, controlling proportion missing values allowed. Default `0.5`. beta Numeric, parameter `PhosR::scImpute` function, controlling maximum number neighbors imputation. Default `0.7`. plot character string specifying whether generate plot. \"\": plot generated; differential phosphorylation table returned. \"volcano_plot\": Generates volcano plot visualize differential phosphorylation. value character string indicating p-value use y-axis volcano plot `plot = \"volcano_plot\"`. \"p_value\": Uses nominal p-values (`P.Value`) y-axis. \"adj_p_value\": Uses adjusted p-values (`adj.P.Val`) y-axis. parameter ignored `plot = \"\"`.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_phos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Phosphoproteomics Data and Perform Differential Analysis with `limma` — get_norm_phos","text":"`plot = \"\"`, returns `data.frame` (tibble) containing results `limma` differential analysis (e.g., `logFC`, `P.Value`, `adj.P.Val`). `plot = \"volcano_plot\"`, returns `list` containing: `table`: `data.frame` differential phosphorylation results. `plot`: `ggplot` object generated volcano plot.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_phos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Phosphoproteomics Data and Perform Differential Analysis with `limma` — get_norm_phos","text":"","code":"if (FALSE) { # \\dontrun{ # Create a data frame that mimics omics data # The column names must contain \"control\" and \"treat\" data <- tibble(         modification_sites = paste0(\"site_\", 1:10),         protein_group = rep(LETTERS[1:5], 2),         amino_acid = c(rep(\"S\", 5), rep(\"T\", 5)),         site = 1:10,         PTM.Group = paste0(\"group_\", 1:10),         p1_control = rnorm(10, mean = 100, sd = 10),         p2_control = rnorm(10, mean = 95, sd = 15),         p3_control = rnorm(10, mean = 105, sd = 12),         p4_treat = c(rnorm(5, mean = 150, sd = 20), rnorm(5, mean = 50, sd = 10)),         p5_treat = c(rnorm(5, mean = 145, sd = 18), rnorm(5, mean = 55, sd = 11)),         p6_treat = c(rnorm(5, mean = 160, sd = 22), rnorm(5, mean = 60, sd = 13)) )  # Run the function to get the normalized data table # We set plot = \"no\" to suppress the volcano plot results_table <- get_norm_phos(         data = data,         plot = \"no\" ) # Print the head of the results table print(head(results_table)) # Run the function to get the results and the volcano plot # We set plot = \"volcano_plot\" and value = \"adj_p_value\" results_with_plot <- get_norm_phos(         data = data,         plot = \"volcano_plot\",         value = \"adj_p_value\" )  # The function returns a list, so we can access the plot and table separately results_table <- results_with_plot$table volcano_plot <- results_with_plot$plot  # Print the plot print(volcano_plot)  # To save the plot to a file # ggplot2::ggsave(\"volcano_plot.png\", plot = volcano_plot, width = 8, height = 6, dpi = 300) } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_prot.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Protein Data and Perform Differential Expression Analysis — get_norm_prot","title":"Normalize Protein Data and Perform Differential Expression Analysis — get_norm_prot","text":"function processes protein data performing normalization, imputation, differential expression analysis using methods PhosR limma packages. can also generate volcano plot visualize results.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_prot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Protein Data and Perform Differential Expression Analysis — get_norm_prot","text":"","code":"get_norm_prot(   data,   alpha = 0.5,   beta = 0.7,   plot = c(\"no\", \"volcano_plot\"),   value = c(\"p_value\", \"adj_p_value\") )"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_prot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Protein Data and Perform Differential Expression Analysis — get_norm_prot","text":"data data frame containing protein data. function assumes columns representing sample intensities names containing suffixed \"_control\" \"_treat\" followed sample identifier (e.g., \"p1_control\", \"p7_control\", \"p5_treat\", \"p6_treat\"). alpha numeric value 0 1. parameter used `PhosR::selectGrps` filter proteins many missing values. protein kept least `n` valid values least `alpha * number_of_groups` groups. Default `0.5`. beta numeric value 0 1. parameter used `PhosR::scImpute`, controls number nearest neighbors imputation. Default `0.7`. plot character string. Specifies whether generate volcano plot. Must one \"\" (default) \"volcano_plot\". value character string. Specifies p-value use volcano plot's y-axis. Must one \"p_value\" (default) \"adj_p_value\".","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_prot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Protein Data and Perform Differential Expression Analysis — get_norm_prot","text":"`plot` \"\", function returns tibble results   differential expression analysis. table includes columns   log fold change (`logFC`), average expression, t-statistic, p-value,   adjusted p-value.   `plot` \"volcano_plot\", function returns list containing   two elements: `table` (results tibble) `plot` (`ggplot` object   volcano plot).","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_norm_prot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Protein Data and Perform Differential Expression Analysis — get_norm_prot","text":"","code":"if (FALSE) { # \\dontrun{ # Create a data frame that mimics omics data # The column names must contain suffixed \"_control\" and \"_treat\" data <- tibble(         protein_group = LETTERS[1:10],         p1_control = rnorm(10, mean = 100, sd = 10),         p2_control = rnorm(10, mean = 95, sd = 15),         p3_control = rnorm(10, mean = 105, sd = 12),         p4_treat = c(rnorm(5, mean = 150, sd = 20), rnorm(5, mean = 50, sd = 10)),         p5_treat = c(rnorm(5, mean = 145, sd = 18), rnorm(5, mean = 55, sd = 11)),         p6_treat = c(rnorm(5, mean = 160, sd = 22), rnorm(5, mean = 60, sd = 13)) )  # Run the function to get the normalized data table # We set plot = \"no\" to suppress the volcano plot results_table <- get_norm_prot(         data = data,         plot = \"no\" ) # Print the head of the results table print(head(results_table)) # Run the function to get the results and the volcano plot # We set plot = \"volcano_plot\" and value = \"adj_p_value\" results_with_plot <- get_norm_prot(         data = data,         plot = \"volcano_plot\",         value = \"adj_p_value\" )  # The function returns a list, so we can access the plot and table separately results_table <- results_with_plot$table volcano_plot <- results_with_plot$plot  # Print the plot print(volcano_plot)  # To save the plot to a file # ggplot2::ggsave(\"volcano_plot.png\", plot = volcano_plot, width = 8, height = 6, dpi = 300) } # }"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_sty.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and Visualize Phosphorylation Site (S/T/Y) Distribution — get_sty","title":"Calculate and Visualize Phosphorylation Site (S/T/Y) Distribution — get_sty","text":"function calculates absolute counts percentages phosphorylation sites (Serine (S), Threonine (T), Tyrosine (Y)) sample, based user-defined phosphorylation site probability cutoff. can optionally generate bar plots visualize counts percentages across different sample groups.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_sty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and Visualize Phosphorylation Site (S/T/Y) Distribution — get_sty","text":"","code":"get_sty(   data,   plot = c(\"no\", \"count\", \"percentage\"),   sample_name,   group,   ptm_site_prob_col,   ptm_site_prob_val = 0.75,   ptm_site_amino_acid,   selected_group = NULL )"},{"path":"https://yen-kim.github.io/omics4drug/reference/get_sty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and Visualize Phosphorylation Site (S/T/Y) Distribution — get_sty","text":"data data frame containing phosphoproteomics data. data frame expected columns sample names, phosphorylation site probabilities, amino acid type phosphorylation site, grouping variable. plot character string specifying type plot generate. \"\": plot generated; summary table returned. \"count\": Generates bar plots showing absolute counts S, T, Y     phosphosites group, faceted amino acid type. \"percentage\": Generates bar plots showing percentage distribution     S, T, Y phosphosites within group, faceted amino acid type. sample_name [`data-masking`][rlang::args_data_masking]> unquoted name column `data` contains unique sample identifiers. e.g., `SampleID`. group <[`data-masking`][rlang::args_data_masking]> unquoted name column `data` defines experimental groups (e.g., \"control\", \"treat\"). ptm_site_prob_col <[`data-masking`][rlang::args_data_masking]> unquoted name column `data` contains phosphorylation site probabilities (e.g., \"Localization_Probabilities\"). ptm_site_prob_val Numeric, cutoff value `ptm_site_prob_col`. sites probability greater equal value included analysis. Default `0.75`. ptm_site_amino_acid <[`data-masking`][rlang::args_data_masking]> unquoted name column `data` contains amino acid type phosphorylation site (expected \"S\", \"T\", \"Y\"). e.g., `Amino_Acid`. selected_group character vector specifying groups `group` column included plots. omitted `NULL`, groups plotted. parameter ignored `plot = \"\"`.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_sty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and Visualize Phosphorylation Site (S/T/Y) Distribution — get_sty","text":"#' `plot = \"\"`, returns `data.frame` (tibble) summarizing counts percentages S, T, Y phosphosites per sample. `plot = \"count\"` `plot = \"percentage\"`, returns `list` containing: `summary_table`: `data.frame` S/T/Y counts percentages. `plot`: `ggplot` object generated bar plot.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/get_sty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and Visualize Phosphorylation Site (S/T/Y) Distribution — get_sty","text":"","code":"# Create data for demonstration set.seed(123) phospho_data <- data.frame(   SampleID = rep(c(\"S1_ctrl\", \"S2_ctrl\", \"S3_treat\", \"S4_treat\"), each = 25),   Group = rep(c(\"Control\", \"Control\", \"Treatment\", \"Treatment\"), each = 25),   Protein = paste0(\"Prot\", 1:100),   Localization_Probabilities = runif(100, 0.5, 0.99),   Amino_Acid = sample(c(\"S\", \"T\", \"Y\"), 100, replace = TRUE, prob = c(0.7, 0.2, 0.1)) )  # Case 1: Calculate S/T/Y distribution and return data only sty_counts_df <- get_sty(   data = phospho_data,   plot = \"no\",   sample_name = SampleID,   group = Group,   ptm_site_prob_col = Localization_Probabilities,   ptm_site_prob_val = 0.75,   ptm_site_amino_acid = Amino_Acid ) print(sty_counts_df) #> # A tibble: 4 × 9 #>   SampleID Group         S     Y     T   STY pct_S pct_T pct_Y #>   <chr>    <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 S1_ctrl  Control      12     4     0    16  75     0    25   #> 2 S2_ctrl  Control       4     1     4     9  44.4  44.4  11.1 #> 3 S3_treat Treatment    10     0     2    12  83.3  16.7   0   #> 4 S4_treat Treatment     9     1     0    10  90     0    10    # Case 2: Calculate S/T/Y distribution and generate count plots # Define selected groups for plotting selected_groups_for_plot <- c(\"Control\", \"Treatment\")  sty_counts_plot <- get_sty(   data = phospho_data,   plot = \"count\",   sample_name = SampleID,   group = Group,   ptm_site_prob_col = Localization_Probabilities,   ptm_site_prob_val = 0.75,   ptm_site_amino_acid = Amino_Acid,   selected_group = selected_groups_for_plot ) print(sty_counts_plot$summary_table) #> # A tibble: 4 × 9 #>   SampleID Group         S     Y     T   STY pct_S pct_T pct_Y #>   <chr>    <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 S1_ctrl  Control      12     4     0    16  75     0    25   #> 2 S2_ctrl  Control       4     1     4     9  44.4  44.4  11.1 #> 3 S3_treat Treatment    10     0     2    12  83.3  16.7   0   #> 4 S4_treat Treatment     9     1     0    10  90     0    10   sty_counts_plot$plot # Display the count plot   # Case 3: Calculate S/T/Y distribution and generate percentage plots sty_percentage_plot <- get_sty(   data = phospho_data,   plot = \"percentage\",   sample_name = SampleID,   group = Group,   ptm_site_prob_col = Localization_Probabilities,   ptm_site_prob_val = 0.75,   ptm_site_amino_acid = Amino_Acid,   selected_group = selected_groups_for_plot ) print(sty_percentage_plot$summary_table) #> # A tibble: 4 × 9 #>   SampleID Group         S     Y     T   STY pct_S pct_T pct_Y #>   <chr>    <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 S1_ctrl  Control      12     4     0    16  75     0    25   #> 2 S2_ctrl  Control       4     1     4     9  44.4  44.4  11.1 #> 3 S3_treat Treatment    10     0     2    12  83.3  16.7   0   #> 4 S4_treat Treatment     9     1     0    10  90     0    10   sty_percentage_plot$plot # Display the percentage plot"},{"path":"https://yen-kim.github.io/omics4drug/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://yen-kim.github.io/omics4drug/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://yen-kim.github.io/omics4drug/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"c(1, 2, 3) %>% mean() #> [1] 2"}]
